<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_starship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = 0;
depth = 0;

animationOver = 0;//lets the player take control of the ship

image_angle = 90;
image_xscale = .1;
image_yscale = image_xscale;

rotationalAngle = 90;
rotationalSpeed = 0;
rotationalAccel = 0;
blackholeDistance = 300;

bhCollision = 0;

rapidFirePowerUp = 0;
rapidFirePowerUpTimer = 0;



asteroidCollision = 0;
//warning flare

warningFlare = noone;
warningFlareAlpha = 0;
warningFlareDirection = 1;
warningFlareCount = 0;

    if surface_exists(warningFlare) {
    
    }else{

        warningFlare = surface_create(room_width, room_height);
        
        surface_set_target(warningFlare);

            draw_clear_alpha(make_colour_rgb(255, 0, 0), 0);
        surface_reset_target();
        
        draw_surface(warningFlare, 0, 0);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//rapid fire timer
rapidFirePowerUp = 0;
rapidFirePowerUpTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//timer for player fire rate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (animationOver == 0){//Animates the inital start sequence

    if ( y &lt; room_height/2 + blackholeDistance - 5){

        if ( y &lt; -(room_height/2 - blackholeDistance) ){
    
            vspeed = vspeed + .1;
        }
        else{
    
            vspeed = vspeed - .1;
        }
    }
    else{

        vspeed = 0;
        y = room_height*0.5 + blackholeDistance;
        
        animationOver = 1;
        obj_control_game.controlActive = 1;
    }
}else if(bhCollision = 1){//takes over when a blackhole collision ocours

    if(image_xscale &gt; 0){
    
    
        image_xscale -= 0.005;
        image_yscale = image_xscale;
        
        blackholeDistance -= 15;
        
        rotationalSpeed += 2*rotationalAccel;
        
        xSkew = blackholeDistance*cos((rotationalSpeed + rotationalAngle)*(pi/180))
        ySkew = blackholeDistance*sin((rotationalSpeed + rotationalAngle)*(pi/180))
    
        y = ySkew + room_height*0.50;
        x = xSkew + room_width*0.50;
        
        image_angle = point_direction(x,y,mouse_x,mouse_y);


    }else{
    
        instance_destroy();
        obj_control_game.controlActive = 0;
        obj_control_game.gameStatus = 0;
        
    }
}else{//main loop holding player controls check most imediate things first

    if ((keyboard_check(vk_left) or keyboard_check(ord("A"))) and rotationalAccel &lt;= 5){//left strafe

        rotationalAccel += 0.1;
    }
    
    if ((keyboard_check(vk_right) or keyboard_check(ord("D"))) and rotationalAccel &gt;= -5){//right strafe
    
        rotationalAccel -= 0.1;
    }
    
    if (keyboard_check(vk_space)){//fire sequence
    
        if (alarm[0] &lt; 0) {
        
            alarm[0] = room_speed * 0.15;
            
            instance_create(13*cos((-image_angle + 90)*(pi/180)) + x,13*sin((-image_angle + 90)*(pi/180)) + y, obj_lazer);
            instance_create(13*cos((-image_angle - 90)*(pi/180)) + x, 13*sin((image_angle - 90)*(pi/180)) + y, obj_lazer);
            
            if(rapidFirePowerUp == 1){
            
                instance_create(13*cos((-image_angle + 90)*(pi/180)) + x,13*sin((-image_angle + 90)*(pi/180)) + y, obj_lazer);
                instance_create(13*cos((-image_angle - 90)*(pi/180)) + x, 13*sin((image_angle - 90)*(pi/180)) + y, obj_lazer);
            }
        }
    }
    
    //positional calculations
    
    rotationalSpeed += 2*rotationalAccel;
       
    xSkew = blackholeDistance*cos((rotationalSpeed + rotationalAngle)*(pi/180))
    ySkew = blackholeDistance*sin((rotationalSpeed + rotationalAngle)*(pi/180))
    
    y = ySkew + room_height*0.50;
    x = xSkew + room_width*0.50;
    
    image_angle = point_direction(x,y,mouse_x,mouse_y);
    
    if(rapidFirePowerUp == 1 and rapidFirePowerUpTimer == 0){//starts rapid fire timer
    
        rapidFirePowerUpTimer = 1;
        alarm[1] = room_speed*15;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blackhole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bhCollision = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>asteroidCollision = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(object_exists(obj_starship) ){

    if(asteroidCollision = 1){
    
        if surface_exists(warningFlare) {
    
            if(warningFlareDirection = 1 and warningFlareAlpha &lt; 0.5){//upperlimit
        
                warningFlareAlpha += 0.08;//alpha
        
                surface_set_target(warningFlare);
        
                draw_clear_alpha(make_colour_rgb(255, 0, 0), warningFlareAlpha);
            surface_reset_target();
        
        
            }else{
        
                warningFlareAlpha -= 0.08;//alpha
        
                surface_set_target(warningFlare);
        
                    draw_clear_alpha(make_colour_rgb(255, 0, 0), warningFlareAlpha);
                surface_reset_target();
            }
        
            if(warningFlareDirection = 1 and warningFlareAlpha &gt;= 0.5){//upperlimit
        
                warningFlareDirection = 0 
            }
            if(warningFlareDirection = 0 and warningFlareAlpha &lt;= 0.0){
        
                warningFlareDirection = 1;  
            }

            draw_surface(warningFlare, 0, 0);
            warningFlareCount += 0.08;//same as alpha
        
            if(warningFlareCount == 2){
        
                surface_set_target(warningFlare);
        
                    draw_clear_alpha(make_colour_rgb(255, 0, 0), 0);
                surface_reset_target()
            
                asteroidCollision = 0;
                warningFlareCount = 0;
                warningFlareAlpha = 0;
            }
        }
    }
}else{

    surface_set_target(warningFlare);
        
        draw_clear_alpha(make_colour_rgb(255, 0, 0), 0);
    surface_reset_target();
    
    draw_surface(warningFlare, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
