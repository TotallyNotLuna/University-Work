<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alarms
alarm[0] = room_speed;//alarm for asteroid spawning.
alarm[1] = room_speed;//alarm for star spawning.
alarm[2] = room_speed;//alarm for power ups

//game stats
starAnimation = 1;
controlActive = 0;
gameStatus = 1;
returnToTitle = 0;
score = 0;
scoreAnimate = 0;

//gui Variables
gameOverCover = noone;
gameOverCoverAlpha = 0;
gameOverTextAlpha = 0;


animationAccel = 5;

dangerWidth = room_width/3;
dangerHeight = room_height/150;

dangerXMargin = room_width/50;
dangerYMargin = dangerXMargin;


animationXposLB = -(room_width/2);
animationXposRB = (room_width + (room_width/2 - room_width/3));
animationYposScore = -(room_height/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//powerup spawn handler

if( controlActive = 1 ){

    spawnPath = irandom_range(1, 2);

    if (spawnPath == 1){
    
        xpos = irandom_range(-256, room_width + 256);
        ypos = choose(- 256, room_height + 256);

        instance_create(xpos, ypos, obj_powerup);
    }else{

        xpos = choose(-256, room_width + 256);
        ypos = irandom_range(- 256, room_height + 256);

        instance_create(xpos, ypos, obj_powerup);
    }
}

alarm[2] = room_speed*random_range(30, 45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spawner for stars
    
xpos = irandom_range(50, room_width -50);
ypos = -50;

instance_create(xpos, ypos, obj_star);
   
if(background_vspeed[0] == 0){

    alarm[1] = room_speed*random_range(2, 2.5);
}else{

    alarm[1] = room_speed*random_range(0.25, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spawner for asteroids

if( controlActive = 1 ){

    spawnPath = irandom_range(1, 2);

    if (spawnPath == 1){
    
        xpos = irandom_range(-256, room_width + 256);
        ypos = choose(- 256, room_height + 256);

        instance_create(xpos, ypos, obj_asteroid);
    }else{

        xpos = choose(-256, room_width + 256);
        ypos = irandom_range(- 256, room_height + 256);

        instance_create(xpos, ypos, obj_asteroid);
    }
}

alarm[0] = room_speed*random_range(0.25, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animates gui
if (animationXposLB &lt; dangerXMargin){

    animationXposLB += 1*animationAccel;
}

if (animationXposRB &gt; (room_width - dangerXMargin - dangerWidth)){

    animationXposRB -= 1*animationAccel;
}

if (animationYposScore &lt; (dangerYMargin + dangerHeight/2)){

    animationYposScore += 1*animationAccel;
}

if (animationAccel &gt; 1){

    animationAccel -= 0.03;
}

//controls the scroll for background
if ( background_y[0] &lt; room_height*3 - 5){

    if ( background_y[0] &lt; (room_height*2) ){
    
        background_vspeed[0] = background_vspeed[0] + .1;
    }
    else{
    
        background_vspeed[0] = background_vspeed[0] - .1;
    }
}
else{

    background_vspeed[0] = 0;
    background_y[0] = room_height*3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(gameOverCover){

    surface_free(gameOverCover);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_roundrect_colour_ext(animationXposLB, dangerYMargin, animationXposLB + dangerWidth, dangerYMargin + dangerHeight, 3, 3, c_white, c_white, false);
draw_roundrect_colour_ext(animationXposRB, dangerYMargin,  animationXposRB + dangerWidth, dangerYMargin + dangerHeight, 3, 3, c_white, c_white, false);
//draw_rectangle_colour(room_width - dangerXMargin - dangerWidth, dangerYMargin, room_width - dangerXMargin, dangerYMargin + dangerHeight, c_white, c_white, c_white, c_white, false);


draw_set_color(c_white);

draw_set_font(fnt_score);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

if(scoreAnimate &lt; score - 10){

    scoreAnimate += 10;
}

if(scoreAnimate &gt; score + 10){

    scoreAnimate -= 10;
}
if(scoreAnimate &lt; score - 5){

    scoreAnimate += 5;
}

if(scoreAnimate &gt; score + 5){

    scoreAnimate -= 5;
}
if(scoreAnimate &lt; score){

    scoreAnimate += 1;
}

if(scoreAnimate &gt; score){

    scoreAnimate -= 1;
}

draw_text(room_width/2, animationYposScore, string(scoreAnimate));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draws game over screen
if (gameStatus = 0){


    if surface_exists(gameOverCover) {
    
        if(gameOverCoverAlpha &lt; 0.75){
        
            gameOverCoverAlpha += 0.01;
        }

        surface_set_target(gameOverCover);

            draw_clear_alpha(c_black, gameOverCoverAlpha);
        surface_reset_target();
    
    
        draw_surface(gameOverCover, 0, 0);
    }else{

        gameOverCover = surface_create(room_width, room_height);
    }
    
    if(gameOverCoverAlpha &gt;= 0.75){
    
        if(gameOverTextAlpha &lt; 1 and returnToTitle == 0){
        
            gameOverTextAlpha += 0.01;
        }
        
        draw_set_font(fnt_header);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        draw_text_colour(room_width/2, room_height*0.25, "Game Over", c_white, c_white, c_white, c_white, gameOverTextAlpha);
        
        draw_set_font(fnt_general);
        
        draw_text_colour(room_width/2, room_height*0.5, "Final score:", c_white, c_white, c_white, c_white, gameOverTextAlpha);
        draw_text_colour(room_width/2, room_height*0.5 + 50, string(score), c_white, c_white, c_white, c_white, gameOverTextAlpha);
        draw_text_colour(room_width/2, room_height*0.75, "Press ENTER to continue", c_white, c_white, c_white, c_white, gameOverTextAlpha);
    
    }
    
    if(gameOverTextAlpha &gt;= 1 and keyboard_check(vk_enter)){
    
        returnToTitle = 1;
    } 
    
    if(returnToTitle == 1){
    
        gameOverCoverAlpha += 0.01;
        gameOverTextAlpha -= 0.04;
    } 
    
    if (gameOverCoverAlpha &gt;= 1){
    
        room_goto(rm_menu);
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
